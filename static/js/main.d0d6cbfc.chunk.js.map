{"version":3,"sources":["Components/BlockSatting/Inputs/Inputs.module.scss","Components/Count/Counter/Counter.module.scss","Components/Count/BtnCount/BtnCount.module.scss","Components/Count/Count.module.scss","Components/BlockSatting/BtnSet/BtnSet.module.scss","Components/BlockSatting/BlockSetting.module.scss","Components/BlockSatting/BtnSet/BtnSet.tsx","Components/BlockSatting/Inputs/Inputs.tsx","Components/BlockSatting/BlockSetting.tsx","Components/Count/Counter/Counter.tsx","Components/Count/BtnCount/BtnCount.tsx","Components/Count/Count.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BtnSet","props","className","style","btnSet","onClick","setValue","valueMax","valueMin","disabled","disBtn","Inputs","inputs_wrapper","inputs_descr","errorMax","input","red","value","type","onChange","e","setValueMax","Number","currentTarget","errorMin","setValueMin","BlockSetting","WindowInput","Counter","count_wrapper","editMessage","count_content","errorEditMessage","count_content_red","countNum","BtnCount","btnCount_wrapper","btn","onClickHandler","name","Count","windowCount","windowCount_inner","incrCounter","resCounter","App","lSValueMax","lSValueMin","key","stateAsString","localStorage","getItem","defaultState","JSON","parse","max","min","restoreState","useState","setCountNum","setEditMessage","setErrorEditMessage","setErrorMax","setErrorMin","setDisBtn","useEffect","state","stringify","setItem","saveState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0d6cbfc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputs_wrapper\":\"Inputs_inputs_wrapper__1f1I-\",\"inputs_descr\":\"Inputs_inputs_descr__2IGCV\",\"input\":\"Inputs_input__-hqPl\",\"red\":\"Inputs_red__2pi2e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count_wrapper\":\"Counter_count_wrapper__3yFzl\",\"count_content\":\"Counter_count_content__3iFpf\",\"count_content_red\":\"Counter_count_content_red__1JRYZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnCount_wrapper\":\"BtnCount_btnCount_wrapper__39XzG\",\"btn\":\"BtnCount_btn__UQwl-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"windowCount\":\"Count_windowCount__3hjJY\",\"windowCount_inner\":\"Count_windowCount_inner__172HO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnSet\":\"BtnSet_btnSet__2XCvz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WindowInput\":\"BlockSetting_WindowInput__14trN\"};","import React from 'react';\nimport style from './BtnSet.module.scss';\n\nexport type BtnSetType = {\n    disBtn:boolean\n    setValue: (valueMax:number,valueMin:number) => void\n    valueMax: number\n    valueMin: number\n}\n\nexport function BtnSet(props:BtnSetType) {\n\n    const setValue = ()=> {\n        props.setValue(props.valueMax,props.valueMin)\n    }\n    return (\n        <div className={style.btnSet}>\n            <button\n                onClick={setValue}\n                disabled={props.disBtn}\n            >Set</button>\n        </div>\n    )\n}","import React, {ChangeEvent} from 'react';\nimport style from './Inputs.module.scss';\n\n\ntype InputsType = {\n    valueMax: number\n    valueMin: number\n    setValueMax: (value: number) => void\n    setValueMin: (value: number) => void\n    errorMax: boolean\n    errorMin: boolean\n}\n\nexport function Inputs(props: InputsType) {\n\n\n    const changeInputMax = (e: ChangeEvent<HTMLInputElement>) => {\n        props.setValueMax(Number(e.currentTarget.value))\n    }\n    const changeInputMin = (e: ChangeEvent<HTMLInputElement>) => {\n        props.setValueMin(Number(e.currentTarget.value))\n    }\n\n    return (\n        <div className={style.inputs_wrapper}>\n            <div className={style.inputs_descr}>\n                <span>max value: </span>\n                <span>min value: </span>\n            </div>\n            <div>\n                <input\n                    className={props.errorMax ? `${style.input} ${style.red}` : style.input}\n                    value={props.valueMax}\n                    type={'number'}\n                    onChange={changeInputMax}\n                />\n                <input className={props.errorMin ? `${style.input} ${style.red}` : style.input}\n                       value={props.valueMin}\n                       onChange={changeInputMin}\n                       type=\"number\"/>\n            </div>\n        </div>\n    )\n}\n\n","import React from 'react';\r\nimport {BtnSet} from \"./BtnSet/BtnSet\";\r\nimport style from \"./BlockSetting.module.scss\";\r\nimport {Inputs} from \"./Inputs/Inputs\";\r\n\r\n\r\ntype PropsType = {\r\n    disBtn:boolean\r\n    valueMax: number\r\n    valueMin: number\r\n    setValueMax: (value: number) => void\r\n    setValueMin: (value: number) => void\r\n    errorMin: boolean\r\n    errorMax: boolean\r\n    setValue: (valueMax: number, valueMin: number) => void\r\n}\r\n\r\nexport function BlockSetting(props: PropsType) {\r\n\r\n    return (\r\n        <div className={style.WindowInput}>\r\n            <Inputs\r\n                valueMax={props.valueMax}\r\n                valueMin={props.valueMin}\r\n                setValueMax={props.setValueMax}\r\n                setValueMin={props.setValueMin}\r\n                errorMin={props.errorMin}\r\n                errorMax={props.errorMax}\r\n            />\r\n            <BtnSet\r\n                disBtn={props.disBtn}\r\n                setValue={props.setValue}\r\n                valueMax={props.valueMax}\r\n                valueMin={props.valueMin}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Counter.module.scss';\r\n\r\ntype  CountType = {\r\n    countNum: number\r\n    valueMax: number\r\n    valueMin: number\r\n    editMessage: boolean\r\n    errorEditMessage: boolean\r\n}\r\n\r\n\r\nexport const Counter = (props: CountType) => {\r\n    return (\r\n        <div>\r\n            <div className={style.count_wrapper}>\r\n                {\r\n                    props.editMessage ? <span className={style.count_content}>Enter values and press\"Set\"</span>\r\n                        : props.errorEditMessage ?\r\n                        <span className={`${style.count_content} ${style.count_content_red}`}>Incorrect value!</span> :\r\n                        <span\r\n                            className={props.countNum === props.valueMax ? `${style.count_content} ${style.count_content_red}` : style.count_content}>  {props.countNum}\r\n                    </span>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport style from './BtnCount.module.scss';\r\n\r\ntype BtnType = {\r\n    onClickHandler: () => void\r\n    name: string\r\n    editMessage: boolean\r\n    errorEditMessage: boolean\r\n}\r\n\r\nexport const BtnCount = (props: BtnType) => {\r\n    const {editMessage, errorEditMessage} = props\r\n\r\n    return (\r\n        <div className={style.btnCount_wrapper}>\r\n\r\n            <button className={style.btn}\r\n                    onClick={props.onClickHandler}\r\n                    disabled={editMessage || errorEditMessage}\r\n            > {props.name}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Counter} from './Counter/Counter';\r\nimport {BtnCount} from './BtnCount/BtnCount';\r\nimport style from './Count.module.scss';\r\n\r\ntype CountType = {\r\n    valueMax: number\r\n    valueMin: number\r\n    incrCounter: () => void\r\n    resCounter: () => void\r\n    countNum: number\r\n    errorEditMessage: boolean\r\n    editMessage: boolean\r\n}\r\n\r\nexport function Count(props: CountType) {\r\n\r\n    return (\r\n        <div className={style.windowCount}>\r\n            <Counter countNum={props.countNum}\r\n                     valueMin={props.valueMin}\r\n                     valueMax={props.valueMax}\r\n                     editMessage={props.editMessage}\r\n                     errorEditMessage={props.errorEditMessage}\r\n            />\r\n            <div className={style.windowCount_inner}>\r\n                <BtnCount\r\n                    onClickHandler={props.incrCounter}\r\n                    name={'Inc'}\r\n                    editMessage={props.editMessage}\r\n                    errorEditMessage={props.errorEditMessage}\r\n                />\r\n                <BtnCount\r\n                    name={'Reset'}\r\n                    onClickHandler={props.resCounter}\r\n                    editMessage={props.editMessage}\r\n                    errorEditMessage={props.errorEditMessage}\r\n                /></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {BlockSetting} from \"./Components/BlockSatting/BlockSetting\";\r\nimport {Count} from \"./Components/Count/Count\";\r\n\r\n\r\nfunction App() {\r\n\r\n    //переменные для функции restoreState\r\n    let lSValueMax: number = 0;\r\n    let lSValueMin: number = 0;\r\n\r\n    type StateType = {\r\n        max: number\r\n        min: number\r\n    }\r\n// Функция сохранения value из  inputs  в lS\r\n    function saveState(key: string, state: StateType) {\r\n        const stateAsString = JSON.stringify(state);\r\n        localStorage.setItem(key, stateAsString)\r\n    }\r\n\r\n// Функция восстановления value  из lS/ проверка на наличие в lS данных\r\n    function restoreState(key: string) {\r\n        const stateAsString = localStorage.getItem(key);\r\n        if (stateAsString !== null) {\r\n            let defaultState = JSON.parse(stateAsString)\r\n            lSValueMax = defaultState.max\r\n            lSValueMin = defaultState.min\r\n            return {lSValueMax, lSValueMin}\r\n        }\r\n    }\r\n    restoreState('test')\r\n\r\n// изменение Value в инпутах окно настроек\r\n    let [valueMax, setValueMax] = useState(lSValueMax || 5  );\r\n    let [valueMin, setValueMin] = useState(lSValueMin || 0  );\r\n// число  в счетчике\r\n    let [countNum, setCountNum] = useState(0);\r\n\r\n// сообщение на экране счетчика о вводе значений\r\n    let [editMessage, setEditMessage] = useState(false);\r\n\r\n// сообщение на экране счетчика о вводе не корректных значений\r\n    let [errorEditMessage, setErrorEditMessage] = useState(false);\r\n\r\n    //   ошибка отдельно для инпутаMax\r\n    let [errorMax, setErrorMax] = useState(false);\r\n    //   ошибка отдельно для инпутаMin\r\n    let [errorMin, setErrorMin] = useState(false);\r\n\r\n    // активность кнопки SET в окне настроек\r\n    let [disBtn, setDisBtn] = useState(true)\r\n\r\n\r\n    useEffect(() => {\r\n        //для активации окна настроек\r\n        if (valueMax != 5 || valueMin != 0) {\r\n            setEditMessage(true)\r\n            setDisBtn(false)\r\n        }\r\n        // проверки на ввод не кооректных значений в инпут ( общие )\r\n        if ((valueMax === valueMin) || (valueMin < 0) || (valueMax < valueMin)) {\r\n            setErrorEditMessage(true)\r\n            setEditMessage(false)\r\n            setDisBtn(true)\r\n            // проверки на ввод не коректных значений в конкретный инпут Min\r\n            if ((valueMin < 0) || (valueMax === valueMin)) {\r\n                setErrorMin(true)\r\n            } else {\r\n                setErrorMin(false)\r\n            }\r\n            // проверки на ввод не коректных значений в конкретный инпут Max\r\n            if ((valueMax < valueMin) || (valueMax === valueMin)) {\r\n                setErrorMax(true)\r\n            } else {\r\n                setErrorMax(false)\r\n            }\r\n        } else {\r\n            setErrorMax(false)\r\n            setErrorMin(false)\r\n            setErrorEditMessage(false)\r\n        }\r\n    }, [valueMax, valueMin]);\r\n\r\n//применяем стартовые значения счетчика, скрываем информационные сообщения,выключаем кнопку set\r\n    const setValue = (valueMax: number, valueMin: number) => {\r\n        setCountNum(valueMin)\r\n        setEditMessage(false)\r\n        setDisBtn(true)\r\n        saveState('test', {max: valueMax, min: valueMin})\r\n    };\r\n//Увеличение счетчика на 1 прикаждом клике на кнопку inc\r\n    const incrCounter = () => {\r\n        if (countNum < valueMax) setCountNum(countNum + 1)\r\n    };\r\n    // сброс счетчика к стартовому значению\r\n    const resCounter = () => setCountNum(valueMin);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <BlockSetting\r\n                valueMax={valueMax}\r\n                valueMin={valueMin}\r\n                setValueMax={setValueMax}\r\n                setValueMin={setValueMin}\r\n                errorMax={errorMax}\r\n                errorMin={errorMin}\r\n                setValue={setValue}\r\n                disBtn={disBtn}\r\n            />\r\n            <Count\r\n                valueMax={valueMax}\r\n                valueMin={valueMin}\r\n                incrCounter={incrCounter}\r\n                resCounter={resCounter}\r\n                countNum={countNum}\r\n                errorEditMessage={errorEditMessage}\r\n                editMessage={editMessage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}